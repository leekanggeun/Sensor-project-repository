function result = linear_interpolation(signal
load data4.mat
signal = data4(1:120000,1);
N = size(signal,1);
rng(2016);
sparsity = 0.125;
measure = randperm(numel(signal), sparsity.*numel(signal));
m = zeros([N, 1]);
m(measure) = signal(measure);
measurement = zeros([N, 1]);
measurement(measure) = 1;

n = N;
S = m;
result = zeros(n,1);
prevx = 1;
prevy = signal(1,1);
for i = 1:n
    if S(i,1) ~= 0;
        prevy = signal(i,1);
        prevx = i;
        result(i,1) = S(i,1);
    end
    if S(i,1) == 0;
        for j = i:n
            if S(j,1) ~= 0
                nextx = j;
                nexty = S(j,1);
                break;
            end
        end
        if nextx == prevx
            result(i,1) = result(i-1,1);
        end
        if nextx ~= prevx
            result(i,1) =  prevy + (nexty-prevy)*(i-prevx)/(nextx-prevx);
        end
    end
end

RMSE = norm(signal-result)/norm(signal)
figure(1); plot(signal); hold on; plot(result); hold off;

% k=0;
% for i=1:N
% if(abs(signal(i,1)-recovered_signal(i,1)) < abs(signal(i,1)-result(i,1)))
% k=k+1;
% end
% end
% k/(N*(1-sparsity))